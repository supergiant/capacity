// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"

	capacity_v1 "github.com/supergiant/capacity/pkg/apis/capacity/v1"
)

// FakeClusterCapacities implements ClusterCapacityInterface
type FakeClusterCapacities struct {
	Fake *FakeCapacityV1
	ns   string
}

var clustercapacitiesResource = schema.GroupVersionResource{Group: "capacity.supergiant.io", Version: "v1", Resource: "clustercapacities"}

var clustercapacitiesKind = schema.GroupVersionKind{Group: "capacity.supergiant.io", Version: "v1", Kind: "ClusterCapacity"}

// Get takes name of the clusterCapacity, and returns the corresponding clusterCapacity object, and an error if there is any.
func (c *FakeClusterCapacities) Get(name string, options v1.GetOptions) (result *capacity_v1.ClusterCapacity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(clustercapacitiesResource, c.ns, name), &capacity_v1.ClusterCapacity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*capacity_v1.ClusterCapacity), err
}

// List takes label and field selectors, and returns the list of ClusterCapacities that match those selectors.
func (c *FakeClusterCapacities) List(opts v1.ListOptions) (result *capacity_v1.ClusterCapacityList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(clustercapacitiesResource, clustercapacitiesKind, c.ns, opts), &capacity_v1.ClusterCapacityList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &capacity_v1.ClusterCapacityList{}
	for _, item := range obj.(*capacity_v1.ClusterCapacityList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterCapacities.
func (c *FakeClusterCapacities) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(clustercapacitiesResource, c.ns, opts))

}

// Create takes the representation of a clusterCapacity and creates it.  Returns the server's representation of the clusterCapacity, and an error, if there is any.
func (c *FakeClusterCapacities) Create(clusterCapacity *capacity_v1.ClusterCapacity) (result *capacity_v1.ClusterCapacity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(clustercapacitiesResource, c.ns, clusterCapacity), &capacity_v1.ClusterCapacity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*capacity_v1.ClusterCapacity), err
}

// Update takes the representation of a clusterCapacity and updates it. Returns the server's representation of the clusterCapacity, and an error, if there is any.
func (c *FakeClusterCapacities) Update(clusterCapacity *capacity_v1.ClusterCapacity) (result *capacity_v1.ClusterCapacity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(clustercapacitiesResource, c.ns, clusterCapacity), &capacity_v1.ClusterCapacity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*capacity_v1.ClusterCapacity), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeClusterCapacities) UpdateStatus(clusterCapacity *capacity_v1.ClusterCapacity) (*capacity_v1.ClusterCapacity, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(clustercapacitiesResource, "status", c.ns, clusterCapacity), &capacity_v1.ClusterCapacity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*capacity_v1.ClusterCapacity), err
}

// Delete takes name of the clusterCapacity and deletes it. Returns an error if one occurs.
func (c *FakeClusterCapacities) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(clustercapacitiesResource, c.ns, name), &capacity_v1.ClusterCapacity{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterCapacities) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(clustercapacitiesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &capacity_v1.ClusterCapacityList{})
	return err
}

// Patch applies the patch and returns the patched clusterCapacity.
func (c *FakeClusterCapacities) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *capacity_v1.ClusterCapacity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(clustercapacitiesResource, c.ns, name, data, subresources...), &capacity_v1.ClusterCapacity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*capacity_v1.ClusterCapacity), err
}
