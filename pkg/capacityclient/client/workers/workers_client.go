// Code generated by go-swagger; DO NOT EDIT.

package workers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateWorker creates a new worker with the specified machine type

This will create a new worker.
*/
func (a *Client) CreateWorker(params *CreateWorkerParams) (*CreateWorkerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorker",
		Method:             "POST",
		PathPattern:        "/api/v1/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateWorkerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWorkerCreated), nil

}

/*
DeleteWorker deletes a worker with the specified machine ID

This will delete a worker.
*/
func (a *Client) DeleteWorker(params *DeleteWorkerParams) (*DeleteWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorker",
		Method:             "DELETE",
		PathPattern:        "/api/v1/workers/{machineID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWorkerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkerOK), nil

}

/*
GetWorker gets a worker with the specified machine ID

This will get a worker.
*/
func (a *Client) GetWorker(params *GetWorkerParams) (*GetWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorker",
		Method:             "GET",
		PathPattern:        "/api/v1/workers/{machineID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkerOK), nil

}

/*
ListMachineTypes lists all provider s machine types

This will show all provider's machine types.
*/
func (a *Client) ListMachineTypes(params *ListMachineTypesParams) (*ListMachineTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachineTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMachineTypes",
		Method:             "GET",
		PathPattern:        "/api/v1/machinetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListMachineTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListMachineTypesOK), nil

}

/*
ListWorkers lists all workers

This will show all workers.
*/
func (a *Client) ListWorkers(params *ListWorkersParams) (*ListWorkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listWorkers",
		Method:             "GET",
		PathPattern:        "/api/v1/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListWorkersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWorkersOK), nil

}

/*
UpdateWorker updates a worker

This will update a worker.
*/
func (a *Client) UpdateWorker(params *UpdateWorkerParams) (*UpdateWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWorker",
		Method:             "PATCH",
		PathPattern:        "/api/v1/workers/{machineID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateWorkerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWorkerOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
