// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Worker Worker is an abstraction used by kubescaler to manage cluster capacity.
//
// It contains data from a (virtual) machine and a kubernetes node running on it.
// swagger:model Worker
type Worker struct {

	// ClusterName is a kubernetes cluster name.
	ClusterName string `json:"clusterName,omitempty"`

	// CreationTimestamp is a timestamp representing a time when this machine was created.
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// MachineID is a unique id of the provider's virtual machine.
	// Required: true
	MachineID *string `json:"machineID"`

	// MachineName is a human-readable name of virtual machine.
	MachineName string `json:"machineName,omitempty"`

	// MachineState represent a virtual machine state.
	MachineState string `json:"machineState,omitempty"`

	// MachineType is type of virtual machine (eg. 't2.micro' for AWS).
	MachineType string `json:"machineType,omitempty"`

	// NodeLabels represents a labels of the kubernetes node that runs on top of that machine.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	// NodeName represents a name of the kubernetes node that runs on top of that machine.
	NodeName string `json:"nodeName,omitempty"`

	// Reserved is a parameter that is used to prevent downscaling of the worker.
	Reserved bool `json:"reserved,omitempty"`
}

// Validate validates this worker
func (m *Worker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Worker) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTimestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateMachineID(formats strfmt.Registry) error {

	if err := validate.Required("machineID", "body", m.MachineID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Worker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Worker) UnmarshalBinary(b []byte) error {
	var res Worker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
